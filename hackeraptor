#!/usr/bin/env python

import argparse

from backend.revshell import revshell
from backend.scan import scan
from backend.webfuzz import webfuzz

parser = argparse.ArgumentParser(   prog="hackeraptor",
                                    description="All-in-one hacking tool" )
subparsers = parser.add_subparsers(help="main command")

subparser = subparsers.add_parser("webfuzz", help="fuzz a web request")
subparser.set_defaults(func=webfuzz)
subparser.add_argument("-u", "--url", help="URL to fuzz", required=True)
subparser.add_argument("-w", "--wordlists", help="wordlist(s) -- $n variable in the request is replaced by a word from the n-th list", nargs="+", required=True)
subparser.add_argument("-H", "--headers", help="add a header", nargs="*")
subparser.add_argument("-m", "--method", help="method", default="GET")
subparser.add_argument("-d", "--data", help="body request content")
subparser.add_argument("--no-verify", help="disable ssl cert verification", action="store_false")
subparser.add_argument("--sizes", help="accepted sizes", nargs="*")
subparser.add_argument("--no-sizes", help="refused sizes", nargs="*")
subparser.add_argument("--status-codes", help="accepted status codes", nargs="*")
subparser.add_argument("--no-status-codes", help="refused status codes", nargs="*")

subparser = subparsers.add_parser("revshell", help="scan ports")
subparser.set_defaults(func=revshell)
subparser.add_argument("language", help="reverse shell language", choices=("python","sh"))
subparser.add_argument("-e", "--encoding", help="payload encoding", choices=("base64","none"), required=True)
subparser.add_argument("-i", "--attacker-ip", help="attacker ip", required=True)
subparser.add_argument("-p", "--attacker-port", help="attacker port", required=True)

subparser = subparsers.add_parser("scan", help="scan ports")
subparser.set_defaults(func=scan)
subparser.add_argument("host", help="host to scan")
subparser.add_argument("-t", "--tcp", help="scan tcp ports", required=False)
subparser.add_argument("-u", "--udp", help="scan udp ports", required=False)

args = parser.parse_args()
if "func" in args:
    args.func(args)
else:
    parser.print_help()
